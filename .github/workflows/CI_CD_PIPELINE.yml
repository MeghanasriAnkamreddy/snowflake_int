name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on any branch or tag commit
  push:
    branches:
      - "*"
      
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # This workflow contains a single job called "deploy"
  deploy:
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure full history is available to access previous commits

      - name: Install SnowSQL
        run: |
          curl -O https://sfc-repo.snowflakecomputing.com/snowsql/bootstrap/1.2/linux_x86_64/snowsql-1.2.9-linux_x86_64.bash
          SNOWSQL_DEST=~/bin SNOWSQL_LOGIN_SHELL=~/.profile bash snowsql-1.2.9-linux_x86_64.bash

      - name: Check SnowSQL Version
        run: |
          ~/bin/snowsql --version

      # Run a SnowSQL Command using environment variables for Snowflake connection details
      - name: Run SnowSQL Command
        env:
          SNOWSQL_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWSQL_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWSQL_PWD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWSQL_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWSQL_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
        run: |
          # Define a function to execute the SnowSQL command
          execute_snow_sql() {
            output=$(/bin/bash -c "~/bin/snowsql -q \"$1\" 2>&1")  # Capture output and error
            echo "$output"  # Log the output for debugging
            return $?  # Return the exit status of the SnowSQL command
          }

          # Get a list of newly committed SQL files
          sql_files=$(git diff --name-only HEAD HEAD~1 | grep '\.sql$')

          # Check if any SQL files were found
          if [ -z "$sql_files" ]; then
            echo "No new SQL files to process."
            exit 0  # Exit if there are no new SQL files
          fi

          # Loop through each SQL file and execute it
          for sql_file in $sql_files; do
            echo "Processing SQL file: $sql_file"
            
            # Read the SQL command from the file
            sql_command=$(<"$sql_file")

            # Try to execute the command
            if execute_snow_sql "$sql_command"; then
              echo "Command succeeded for $sql_file."
            else
              echo "Command failed for $sql_file. Error: $output"
              echo "Executing last committed version..."

              # Checkout the last committed version of the SQL file
              git checkout HEAD~1 --force "$sql_file"

              # Read the last committed version of the SQL command
              last_sql_command=$(<"$sql_file")
              if execute_snow_sql "$last_sql_command"; then
                echo "Previous version of $sql_file executed successfully."
              else
                echo "Failed to execute previous version of $sql_file. Error: $output"
                exit 1  # Exit with failure if the fallback also fails
              fi
            fi
          done
