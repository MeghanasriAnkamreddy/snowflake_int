name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on any branch or tag commit
  push:
    branches:
      - "*"
      
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # This workflow contains a single job called "deploy"
  deploy:
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Install SnowSQL
        run: |
          curl -O https://sfc-repo.snowflakecomputing.com/snowsql/bootstrap/1.2/linux_x86_64/snowsql-1.2.9-linux_x86_64.bash
          SNOWSQL_DEST=~/bin SNOWSQL_LOGIN_SHELL=~/.profile bash snowsql-1.2.9-linux_x86_64.bash

      - name: Check SnowSQL Version
        run: |
          ~/bin/snowsql --version

      # Run a series of SnowSQL commands
      - name: Run SnowSQL Command
        env:
          SNOWSQL_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWSQL_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWSQL_PWD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWSQL_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWSQL_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
        run: |
          # Define a function to execute SnowSQL commands and handle errors
          execute_snow_sql() {
            output=$(/bin/bash -c "~/bin/snowsql -q \"$1\" 2>&1")  # Capture output and error
            echo "$output"  # Log output for debugging
            return $?  # Return the exit status
          }

          # Execute a command and check for success
          run_command() {
            command="$1"
            echo "Running: $command"
            if ! execute_snow_sql "$command"; then
              echo "Command failed: $command. Executing previous version..."
              return 1  # Indicate failure
            fi
            return 0  # Indicate success
          }

          # Commands to run
          commands=(
            "SELECT CURRENT_VERSION();"
            "ALTER GIT REPOSITORY CI_CD_DEMO.DEMO_SCHEMA.snowflake_extensions FETCH;"
            "USE DATABASE CI_CD_DEMO; USE SCHEMA DEMO_SCHEMA; EXECUTE IMMEDIATE FROM @snowflake_extensions/branches/main/SQL_SCRIPT.SQL;"
          )

          # Loop through each command and run it
          for command in "${commands[@]}"; do
            if ! run_command "$command"; then
              # If a command fails, checkout the last committed version of the SQL script
              echo "Checking out last committed version of the SQL_SCRIPT.SQL..."
              git checkout HEAD~1 --force

              # Re-run the command for the previous version
              last_command="USE DATABASE CI_CD_DEMO; USE SCHEMA DEMO_SCHEMA; EXECUTE IMMEDIATE FROM @snowflake_extensions/branches/main/SQL_SCRIPT.SQL;"
              echo "Executing previous version: $last_command"
              if ! execute_snow_sql "$last_command"; then
                echo "Failed to execute previous version of SQL_SCRIPT.SQL."
                exit 1  # Exit with failure if the fallback fails
              fi
            fi
          done
