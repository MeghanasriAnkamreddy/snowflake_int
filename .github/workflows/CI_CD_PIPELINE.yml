name: CI

on:
  push:
    branches:
      - "*"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full commit history for accessing previous commits

      - name: Install SnowSQL
        run: |
          curl -O https://sfc-repo.snowflakecomputing.com/snowsql/bootstrap/1.2/linux_x86_64/snowsql-1.2.9-linux_x86_64.bash
          SNOWSQL_DEST=~/bin SNOWSQL_LOGIN_SHELL=~/.profile bash snowsql-1.2.9-linux_x86_64.bash

      - name: Check SnowSQL Version
        run: ~/bin/snowsql --version

      - name: Get the list of modified SQL scripts
        id: modified_files
        run: |
          # Determine the range of commits to compare
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            echo "Fetching modified files between HEAD and previous commit..."
            git diff --name-only HEAD~1 HEAD > modified_files.txt
          else
            echo "No previous commit. Fetching all committed files in the current commit..."
            git ls-tree --name-only --full-tree HEAD > modified_files.txt
          fi

          # Display all modified files
          echo "Modified files:"
          cat modified_files.txt

          # Filter only SQL files (case-insensitive)
          grep -i '\.sql$' modified_files.txt > sql_files.txt || true

          # Display filtered SQL files
          if [ -s sql_files.txt ]; then
            echo "Modified SQL files:"
            cat sql_files.txt
          else
            echo "No SQL files modified."
          fi

      - name: Run SnowSQL Command with Error Handling
        env:
          SNOWSQL_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWSQL_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWSQL_PWD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWSQL_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWSQL_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
        run: |
          set -e  # Enable exit on error for safe blocks

          # Fetch latest from Snowflake repository
          ~/bin/snowsql -o exit_on_error=true -q "ALTER GIT REPOSITORY CI_CD_DEMO.DEMO_SCHEMA.snowflake_extensions FETCH;"

          # Check if sql_files.txt is not empty before proceeding
          if [ -s sql_files.txt ]; then
            error_log="error_log.txt"
            > "$error_log"  # Empty the error log file if it exists

            while IFS= read -r file; do
              echo "Running SQL file: $file"
              set +e  # Disable exit on error to handle errors manually

              # Try executing the current SQL file from Snowflake stage
              ~/bin/snowsql -o exit_on_error=true -q "
                USE DATABASE CI_CD_DEMO;
                USE SCHEMA DEMO_SCHEMA;
                EXECUTE IMMEDIATE FROM @snowflake_extensions/branches/main/$file;"
              EXIT_CODE=$?

              if [ $EXIT_CODE -ne 0 ]; then
                echo "Error executing $file. Fetching the previous version from Git."

                # Fetch the previous version of the SQL file using git show
                if git show HEAD~1:$file > prev_commit.sql 2>/dev/null; then
                  echo "Running the previous version of $file"

                  # Prepend necessary context commands to the previous SQL script
                  echo "USE DATABASE CI_CD_DEMO;
                        USE SCHEMA DEMO_SCHEMA;" > temp_prev_commit.sql
                  cat prev_commit.sql >> temp_prev_commit.sql

                  # Execute the previous commit's SQL file locally
                  ~/bin/snowsql -o exit_on_error=true -f temp_prev_commit.sql
                  PREV_EXIT_CODE=$?

                  if [ $PREV_EXIT_CODE -ne 0 ]; then
                    echo "Error executing the previous version of $file." | tee -a "$error_log"
                  else
                    echo "Previous version of $file executed successfully."
                  fi

                  # Clean up temporary files
                  rm temp_prev_commit.sql prev_commit.sql
                else
                  echo "Failed to fetch the previous version of $file. Skipping..." | tee -a "$error_log"
                fi
              else
                echo "$file executed successfully."
              fi

              set -e  # Re-enable exit on error
            done < sql_files.txt

            # Check if any errors were logged
            if [ -s "$error_log" ]; then
              echo "Some SQL files failed to execute. Check the error log below:"
              cat "$error_log"
              exit 1  # Fail the workflow if there were errors
            else
              echo "All SQL files executed successfully."
            fi
          else
            echo "No SQL files to execute."
          fi
